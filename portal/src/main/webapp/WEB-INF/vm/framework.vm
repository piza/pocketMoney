<script type="text/template" id="framework-view">
    <%if(tempId == 'FormGroup'){%>
    <%if(data.label){%>
    <label for="<%=data.label.for || '' %>" class="<%=data.label.className || '' %>"><%=data.label.showName || '' %></label>
    <%}%>
    <div class="<%=data.divClass%>">
        <%if(data.input){%>
        <input type="<%=data.input.type%>" class="<%=data.input.className%>" id="<%=data.input.id%>" placeholder="<%=data.input.placeholder || ''%>" name="<%=data.input.name%>">
        <%if(data.captcha){%>
        <img id="captchaImage" class="<%=data.captcha.captchaImage%>" src="<%=data.captcha.captchaURL || ''%>" title="点击更换验证码">
        <%}%>
        <span></span>
        <%} else if(data.button){%>
        <button type="<%=data.button.type%>" class="<%=data.button.className%>" id="<%=data.event.elId%>"><%=data.button.value%></button>
        <%} else if(data.radio){%>
        <%_.each(data.radio.options,function(option){%>
        <input type="radio" name="<%=data.radio.name%>" value="<%=option.val%>">
        <%=option.show%>
        <%});%>
        <span></span>
        <%} else if(data.select){%>
        <select name="<%=data.select.name%>">
            <% if(data.select.defVal){%>
            <option value="<%=data.select.defVal.val%>"><%=data.select.defVal.show%></option>
            <%}%>
            <% if(data.select.options){%>
            <%_.each(data.select.options,function(option){%>
            <option value="<%=option.val%>"><%=option.show%></option>
            <%});%>
            <%}%>
        </select>
        <span></span>
        <%} else if(data.file){%>
        初始化文件上传工具.....
        <%}%>
    </div>

    <%} else if(tempId == 'attach-file'){%>

    <div class="row">
        <div class="col-md-3 preview">
            <img src="" style="width:80px;height:80px;"/>
        </div>
        <div class="col-md-4">
            <input type="button" value="选择文件" id="attachBtnAgent" class="btn btn-primary">
            <input type="text" name="<%=data.name%>" style="display: none;">
            <input type="file" name="<%=data.name%>" id="attachBtn" style="display: none;">
        </div>
        <div class="col-md-5">
            <input type="button" class="btn btn-primary" value="上传" id="uploadBtn"/>
        </div>
    </div>

    <%} else if(tempId == 'Paging'){%>
    <ul>
        <% if(data.pages > 1) { %>
        <% if(data.prev) { %>
        <li> <a href="#" class="prev">上一页</a> </li>
        <% } else { %>
        <li class="active"> <a disabled="true">上一页</a> </li>
        <% } %>

        <%  _.each(data.pageNums,function(num){
        if(num==data.page){
        %>
        <li class="active"><a href="<%=num%>" class="toPage"><%=num%></a></li>
        <%}else{%>
        <li><a href="<%=num%>" class="toPage"><%=num%></a></li>
        <%
        }});
        %>

        <% if(data.next) { %>
        <li> <a href="#" class="next">下一页</a></li>
        <% } else { %>
        <li class="active"> <a disabled="true">下一页</a></li>
        <% } %>
        <% } %>

        <li class="active">
            <a disabled="true"><%=data.range[0] %>-<%=data.range[1] %> 共 <%=data.total %></a>
        </li>
    </ul>

    <%} else if(tempId == 'PagingNoResult'){%>

    <%}%>
</script>
#[[
<script type="text/javascript">

    define('FrameworkModule',['backbone'], function(Backbone){
        var Framework={};
        Framework.BaseModel=Backbone.Model.extend({
            parse:function(res){
                if(res.success){
                    //Backbone.Events.trigger("Hint-Message",{"type":"提示","message":"操作成功"});
                    return res.success;
                }else if(res.failed && res.failed.errorType){
                    Backbone.Events.trigger("Request-Failed",res.failed);
                    //Backbone.Events.trigger("Hint-Message",{"type":"警告","message":"操作失败"});
                    this.trigger("exception",res.failed,this);
                }else{
                    return res;
                }
            }
        });

        Framework.BaseCollection=Backbone.Collection.extend({
            parse:function(res){
                if(res.success){
                    //Backbone.Events.trigger("Hint-Message",{"type":"提示","message":"操作成功"});
                    return res.success;
                }else if(res.failed && res.failed.errorType){
                    Backbone.Events.trigger("Request-Failed",res.failed);
                    this.trigger('failed',res.failed);
                    // Backbone.Events.trigger("Hint-Message",{"type":"警告","message":"操作失败"});
                }else{
                    this.trigger("exception","Unexpected data!",this);
                }
            }
        });

        Framework.PaginatedCollection = Backbone.Collection.extend({
            initialize: function(param) {
                this.baseUrl=param.baseUrl;
                this.perPage=param.perPage;
               // _.bindAll(this, 'parse', 'url', 'pageInfo', 'nextPage', 'previousPage');
                typeof(options) != 'undefined' || (options = {});
                this.page = 1;
                typeof(this.perPage) != 'undefined' || (this.perPage = 10);

                this.bind("exception",function(errMes){
                    Backbone.Events.trigger("Hint-Message",{"type":"警告","message":"服务器返回数据库格式错误!"});
                }) ;
            },
            fetch: function(options) {
                typeof(options) != 'undefined' || (options = {});
                //Backbone.Events.trigger("Hint-Message",{"type":"提示","message":"加载中......"});
                var self = this;
                var success = options.success;
                options.success = function(resp) {
                    //Backbone.Events.trigger("Hint-Message",{"type":"提示","message":"加载成功!"});
                    if(success) { success(self, resp); }
                };
                return Backbone.Collection.prototype.fetch.call(this, options);
            },
            parse: function(res) {
                if(res.success){
                    this.page = res.success.pagingInfo.page;
                    this.perPage = res.success.pagingInfo.limit;
                    this.total = res.success.pagingInfo.count;
                    return res.success.models;
                }else if(res.failed && res.failed.errorType){
                    Backbone.Events.trigger("Hint-Message",{"type":"警告","message":"操作失败","failed":res.failed});
                    this.trigger("exception",res.failed,this);
                }else{
                    this.trigger("exception","Unexpected data!",this);
                }
            },
            url:function(queryData) {
                if(queryData === undefined){

                }else{
                    this.queryData=queryData;
                }
                if(this.queryData === undefined || this.queryData == null || this.queryData == {}){
                    return this.baseUrl + '?' + $.param({"paging.need":1,"paging.page": this.page, "paging.limit": this.perPage});
                }else{
                    return this.baseUrl + '?' + $.param({"paging.need":1,"paging.page": this.page, "paging.limit": this.perPage})+'&'+$.param(this.queryData);
                }

            },
            pageInfo: function() {
                var info = {
                    total: this.total,
                    page: this.page,
                    perPage: this.perPage,
                    pages: Math.ceil(this.total / this.perPage),
                    prev: false,
                    next: false
                };

                var max = Math.min(this.total, this.page * this.perPage);

                if (this.total == this.pages * this.perPage) {
                    max = this.total;
                }

                info.range = [(this.page - 1) * this.perPage + 1, max];
                var startNum=Math.floor(info.page/2)-2;
                if(startNum<0){
                    startNum=0;
                }
                var endNum=info.page+3;
                if(endNum>info.pages){
                    endNum=info.pages;
                }
                info.pageNums=new Array(info.page);
                for(var i=0;i<(endNum-startNum);i++){
                    info.pageNums[i]=startNum+i+1;
                }
                if (this.page > 1) {
                    info.prev = this.page - 1;
                }

                if (this.page < info.pages) {
                    info.next = this.page + 1;
                }

                return info;
            },
            nextPage: function() {
                if (!this.pageInfo().next) {
                    return false;
                }
                this.page = this.page + 1;
                return this.fetch({reset:true});
            },
            previousPage: function() {
                if (!this.pageInfo().prev) {
                    return false;
                }
                this.page = this.page - 1;
                return this.fetch({reset:true});
            },
            toPage:function(pageNum){
                if(pageNum<0 || pageNum>this.pageInfo().pages){
                    return false;
                }
                this.page=pageNum;
                return this.fetch({reset:true});
            }

        });

        Framework.PaginatedView= Backbone.View.extend({
            template:_.template($("#framework-view").html()),
            //className:"pagination", need invoke setElement to bind event
            initialize: function() {
                _.bindAll(this, 'previous', 'next','gotoPage', 'render');
                this.collection.bind('refresh', this.render);
                this.collection.bind('reset', this.render);
            },
            events: {
                'click a.prev': 'previous',
                'click a.toPage': 'gotoPage',
                'click a.next': 'next'
            },
            render: function() {
                if(this.collection.length >0){
                    $(this.el).html(this.template({"tempId":"Paging","data":this.collection.pageInfo()}));
                }else{
                    $(this.el).html(this.template({"tempId":"PagingNoResult","data":null}));

                }
                return this;
            },
            previous: function(e) {
                e.preventDefault();
                this.collection.previousPage();
                return false;
            },
            next: function(e) {
                e.preventDefault();
                this.collection.nextPage();
                return false;
            },
            gotoPage:function(e){
                e.preventDefault();
                var pageNum=$(e.target || e.srcElement).attr("href");
                this.collection.toPage(pageNum);
                return false;
            }
        });

        return Framework;
    });
</script>
]]#